{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prabhaty\\\\Desktop\\\\CodingPlatformFrontEnd\\\\src\\\\Code.js\";\nimport React from 'react';\nimport './Register.css';\nimport Loader from 'react-loader-spinner';\nimport cookie from 'react-cookies';\nimport Select from 'react-select';\nimport qs from 'qs';\n\nvar unirest = require(\"unirest\");\n\nvar req = unirest(\"POST\", \"https://ideas2it-hackerearth.p.rapidapi.com/compile/\");\nreq.headers({\n  \"x-rapidapi-host\": \"ideas2it-hackerearth.p.rapidapi.com\",\n  \"x-rapidapi-key\": \"8befd2b7c8msh15a1471ae2f8f39p1bfc20jsn980dfbdc4c7a\",\n  \"content-type\": \"application/x-www-form-urlencoded\"\n});\nreq.form({\n  \"async\": \"0\",\n  \"time_limit\": \"10\",\n  \"memory_limit\": \"262144\",\n  \"client_secret\": \"c80a8e5ab76c54820f05971d7ed7b8286431087a\",\n  \"source\": \"int main() {   printf(\\\"Hello world\\\\n\\\");   return 0; }\",\n  \"lang\": \"C\"\n});\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n  console.log(res.body);\n});\n\nvar hackerEarth = require('hackerearth-node'); //require the Library\n//Now set your application \n\n\nvar hackerEarth = new hackerEarth('c80a8e5ab76c54820f05971d7ed7b8286431087a', //Your Client Secret Key here this is mandatory\n0 //mode sync=1 or async(optional)=0 or null async is by default and preferred for nodeJS\n);\nvar config = {};\nconfig.time_limit = 1; //your time limit in integer\n\nconfig.memory_limit = 323244; //your memory limit in integer\n\nconfig.source = 'print(\"Hello\")'; //your source code for which you want to use hackerEarth api\n\nconfig.input = \"\"; //input against which you have to test your source code\n\nconfig.language = \"Py\"; //optional choose any one of them or none\n\nclass Code extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = selectedOption => {\n      this.setState({\n        selectedOption: selectedOption\n      });\n    };\n\n    this.state = {\n      codeStatement: '',\n      codeDescription: '',\n      codeInputFormat: [],\n      codeOutputFormat: [],\n      codeTestCases: '',\n      toShowLoader: false,\n      questionType: '',\n      codeOutput: '',\n      codeInput: '',\n      example: [],\n      placeHolder: \"Select Language\",\n      selectedOption: '',\n      oAvailableLanguage: [{\n        value: \"C\",\n        label: \"C\"\n      }, {\n        value: \"CPP\",\n        label: \"C++\"\n      }, {\n        value: \"Py\",\n        label: \"Python\"\n      }, {\n        value: \"JAVA\",\n        label: \"JAVA\"\n      }]\n    };\n    this.compileCode = this.compileCode.bind(this);\n    this.submitCode = this.submitCode.bind(this);\n    this.submitScore = this.submitScore.bind(this);\n    this.updateCode = this.updateCode.bind(this);\n    this.splitCodeInput = this.splitCodeInput.bind(this);\n    this.splitCodeOutput = this.splitCodeOutput.bind(this);\n    this.splitCodeExample = this.splitCodeExample.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      toShowLoader: true\n    });\n    var teamName = cookie.load('teamName');\n\n    if (teamName !== null && teamName !== undefined && teamName !== \"\") {\n      fetch(\"https://codingplatformbackend.herokuapp.com/codingPlatform/fetchQuestion?key=SHARED_KEY\", {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          \"teamName\": teamName\n        })\n      }).then(res => res.json()).then(result => {\n        if (result.status === \"Success\" && result.problemStatement !== \"4\") {\n          this.splitCodeInput(result.questionInputFormat);\n          this.splitCodeOutput(result.questionOutputFormat);\n          this.splitCodeExample(result.example);\n          this.setState({\n            codeStatement: result.problemStatement,\n            codeDescription: result.problemDescription,\n            toShowLoader: false\n          });\n        } else if (result.problemStatement === \"4\") {\n          alert(\"Test Completed\");\n        } else if (result.status === \"Fail\") {\n          alert(\"Something went wrong\");\n        }\n      });\n    } else {\n      this.props.history.push('/login');\n    }\n  }\n\n  updateCode(event) {\n    this.setState({\n      codeInput: event.target.value\n    });\n  }\n\n  splitCodeInput(questionInputFormat) {\n    var delimiter = \"$_$\";\n    var output = questionInputFormat.split(delimiter);\n    this.setState({\n      codeInputFormat: output\n    });\n  }\n\n  splitCodeOutput(questionInputFormat) {\n    var delimiter = \"$_$\";\n    var output = questionInputFormat.split(delimiter);\n    this.setState({\n      codeOutputFormat: output\n    });\n  }\n\n  splitCodeExample(questionInputFormat) {\n    var delimiter = \"$_$\";\n    var output = questionInputFormat.split(delimiter);\n    this.setState({\n      example: output\n    });\n  }\n\n  compileCode() {\n    fetch(\"https://api.hackerearth.com/v3/code/compile/\", {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      method: \"POST\",\n      body: qs.stringify({\n        \"client_secret\": \"f3c1455800df92db6737d087ac0c93424bbe1e40\",\n        \"async\": 1,\n        \"source\": \"print(\\\"Hello\\\")\",\n        \"lang\": \"PYTHON\",\n        \"input\": \"\",\n        \"time_limit\": 1,\n        \"memory_limit\": 323244\n      })\n    }).then(res => res.json()).then(result => {\n      if (result.status === \"Success\") {\n        this.props.toggleQuestion();\n      } else if (result.status === \"Fail\") {\n        alert(\"Something went wrong\");\n      }\n    });\n  }\n\n  submitCode() {\n    hackerEarth.run(config).then(result => {\n      console.log(result); //this.submitScore();\n    }).catch(err => {\n      alert(err);\n    }); //this.submitScore();\n  }\n\n  submitScore() {\n    var teamName = cookie.load('teamName');\n\n    if (teamName !== null && teamName !== undefined && teamName !== \"\") {\n      fetch(\"https://codingplatformbackend.herokuapp.com/codingPlatform/fetchQuestion?key=SHARED_KEY\", {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          \"teamName\": teamName,\n          \"answer\": \"ac\"\n        })\n      }).then(res => res.json()).then(result => {\n        if (result.status === \"Success\") {\n          this.props.toggleQuestion();\n        } else if (result.status === \"Fail\") {\n          alert(\"Something went wrong\");\n        }\n      });\n    } else {\n      this.props.history.push('/login');\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, this.state.toShowLoader === true ? React.createElement(\"div\", {\n      className: \"loadingScreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      type: \"Circles\",\n      color: \"#3578E5\",\n      height: 100,\n      width: 100,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"codingQuestion\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, this.state.codeStatement), React.createElement(\"div\", {\n      className: \"codeDescription\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, this.state.codeDescription), React.createElement(\"div\", {\n      className: \"codeInputType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Constraints\", this.state.codeInputFormat.map((i, key) => {\n      return React.createElement(\"div\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, i);\n    })), React.createElement(\"div\", {\n      className: \"codeOutputType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"Input\", this.state.example.map((i, key) => {\n      return React.createElement(\"div\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, i);\n    })), React.createElement(\"div\", {\n      className: \"codeOutputType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Expected Output\", this.state.codeOutputFormat.map((i, key) => {\n      return React.createElement(\"div\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, i);\n    })), React.createElement(Select, {\n      className: \"availableLanguage\",\n      onChange: this.handleChange,\n      options: this.state.oAvailableLanguage,\n      placeholder: this.state.placeHolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      className: \"codeInput\",\n      type: \"text\",\n      placeholder: \"Type your code here\",\n      onChange: this.updateCode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"buttonHolder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"codeAnswerButton\",\n      onClick: this.compileCode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"Compile\"), React.createElement(\"div\", {\n      className: \"codeAnswerButton\",\n      onClick: this.submitCode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}\n\nexport default Code;","map":{"version":3,"sources":["C:/Users/prabhaty/Desktop/CodingPlatformFrontEnd/src/Code.js"],"names":["React","Loader","cookie","Select","qs","unirest","require","req","headers","form","end","res","error","Error","console","log","body","hackerEarth","config","time_limit","memory_limit","source","input","language","Code","Component","constructor","props","handleChange","selectedOption","setState","state","codeStatement","codeDescription","codeInputFormat","codeOutputFormat","codeTestCases","toShowLoader","questionType","codeOutput","codeInput","example","placeHolder","oAvailableLanguage","value","label","compileCode","bind","submitCode","submitScore","updateCode","splitCodeInput","splitCodeOutput","splitCodeExample","componentDidMount","teamName","load","undefined","fetch","method","JSON","stringify","then","json","result","status","problemStatement","questionInputFormat","questionOutputFormat","problemDescription","alert","history","push","event","target","delimiter","output","split","toggleQuestion","run","catch","err","render","map","i","key"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './Register.css';\r\nimport Loader from 'react-loader-spinner';\r\nimport cookie from 'react-cookies';\r\nimport Select from 'react-select';\r\nimport qs from 'qs';\r\nvar unirest = require(\"unirest\");\r\n\r\nvar req = unirest(\"POST\", \"https://ideas2it-hackerearth.p.rapidapi.com/compile/\");\r\n\r\nreq.headers({\r\n\t\"x-rapidapi-host\": \"ideas2it-hackerearth.p.rapidapi.com\",\r\n\t\"x-rapidapi-key\": \"8befd2b7c8msh15a1471ae2f8f39p1bfc20jsn980dfbdc4c7a\",\r\n\t\"content-type\": \"application/x-www-form-urlencoded\"\r\n});\r\n\r\nreq.form({\r\n\t\"async\": \"0\",\r\n\t\"time_limit\": \"10\",\r\n\t\"memory_limit\": \"262144\",\r\n\t\"client_secret\": \"c80a8e5ab76c54820f05971d7ed7b8286431087a\",\r\n\t\"source\": \"int main() {   printf(\\\"Hello world\\\\n\\\");   return 0; }\",\r\n\t\"lang\": \"C\"\r\n});\r\n\r\nreq.end(function (res) {\r\n\tif (res.error) throw new Error(res.error);\r\n\r\n\tconsole.log(res.body);\r\n});\r\nvar hackerEarth=require('hackerearth-node'); //require the Library\r\n//Now set your application \r\nvar hackerEarth=new hackerEarth(\r\n        'c80a8e5ab76c54820f05971d7ed7b8286431087a',  //Your Client Secret Key here this is mandatory\r\n        0  //mode sync=1 or async(optional)=0 or null async is by default and preferred for nodeJS\r\n);\r\nvar config={};\r\nconfig.time_limit=1;  //your time limit in integer\r\nconfig.memory_limit=323244;  //your memory limit in integer\r\nconfig.source='print(\"Hello\")';  //your source code for which you want to use hackerEarth api\r\nconfig.input=\"\";  //input against which you have to test your source code\r\nconfig.language=\"Py\"; //optional choose any one of them or none\r\n\r\nclass Code extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      codeStatement:'',\r\n      codeDescription:'',\r\n      codeInputFormat:[],\r\n      codeOutputFormat:[],\r\n      codeTestCases:'',\r\n      toShowLoader:false,\r\n      questionType:'',\r\n      codeOutput:'',\r\n      codeInput:'',\r\n      example:[],\r\n      placeHolder: \"Select Language\",\r\n      selectedOption:'',\r\n      oAvailableLanguage:[{value:\"C\", label:\"C\"},{value:\"CPP\", label:\"C++\"},{value:\"Py\", label:\"Python\"},{value:\"JAVA\", label:\"JAVA\"}]\r\n    };\r\n    this.compileCode = this.compileCode.bind(this);\r\n    this.submitCode = this.submitCode.bind(this);\r\n    this.submitScore = this.submitScore.bind(this);\r\n    this.updateCode = this.updateCode.bind(this);\r\n    this.splitCodeInput = this.splitCodeInput.bind(this);\r\n    this.splitCodeOutput = this.splitCodeOutput.bind(this);\r\n    this.splitCodeExample = this.splitCodeExample.bind(this);\r\n}\r\ncomponentDidMount(){\r\n  this.setState({toShowLoader:true});\r\n  var teamName=cookie.load('teamName');\r\n  if(teamName!==null&&teamName!==undefined&&teamName!==\"\"){\r\n  fetch(\"https://codingplatformbackend.herokuapp.com/codingPlatform/fetchQuestion?key=SHARED_KEY\",{\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\"teamName\":teamName})\r\n        })\r\n          .then(res => res.json())\r\n          .then(\r\n            (result) => {\r\n              if(result.status === \"Success\"&&result.problemStatement!==\"4\"){\r\n                this.splitCodeInput(result.questionInputFormat);\r\n                this.splitCodeOutput(result.questionOutputFormat);\r\n                this.splitCodeExample(result.example);\r\n                this.setState({codeStatement:result.problemStatement,codeDescription:result.problemDescription, toShowLoader:false});\r\n              }else if(result.problemStatement===\"4\"){\r\n                alert(\"Test Completed\");\r\n              }\r\n              else if(result.status === \"Fail\"){\r\n                  alert(\"Something went wrong\");\r\n              }\r\n            }\r\n    )\r\n  }else{\r\n    this.props.history.push('/login');\r\n  }\r\n}\r\nupdateCode(event){\r\n  this.setState({codeInput:event.target.value});\r\n}\r\nsplitCodeInput(questionInputFormat){\r\n  var delimiter=\"$_$\";\r\n  var output = questionInputFormat.split(delimiter);\r\n  this.setState({codeInputFormat:output});\r\n}\r\nsplitCodeOutput(questionInputFormat){\r\n  var delimiter=\"$_$\";\r\n  var output = questionInputFormat.split(delimiter);\r\n  this.setState({codeOutputFormat:output});\r\n}\r\nsplitCodeExample(questionInputFormat){\r\n  var delimiter=\"$_$\";\r\n  var output = questionInputFormat.split(delimiter);\r\n  this.setState({example:output});\r\n}\r\ncompileCode(){\r\nfetch(\"https://api.hackerearth.com/v3/code/compile/\",{\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n          },\r\n          method: \"POST\",\r\n          body: qs.stringify({\"client_secret\": \"f3c1455800df92db6737d087ac0c93424bbe1e40\",\r\n            \"async\": 1,\r\n            \"source\": \"print(\\\"Hello\\\")\",\r\n            \"lang\": \"PYTHON\",\r\n            \"input\": \"\",\r\n            \"time_limit\": 1,\r\n            \"memory_limit\": 323244})\r\n        })\r\n          .then(res => res.json())\r\n          .then(\r\n            (result) => {\r\n              if(result.status === \"Success\"){\r\n                  this.props.toggleQuestion();\r\n              }else if(result.status === \"Fail\"){\r\n                  alert(\"Something went wrong\");\r\n              }\r\n            }\r\n    )\r\n}\r\nsubmitCode(){\r\n  hackerEarth.run(config)\r\n                    .then(result => {\r\n                      console.log(result);\r\n                      //this.submitScore();\r\n                    })\r\n                    .catch(err => {\r\n                      alert(err);\r\n                    });\r\n  //this.submitScore();\r\n}\r\nsubmitScore(){\r\n  var teamName=cookie.load('teamName');\r\n  if(teamName!==null&&teamName!==undefined&&teamName!==\"\"){\r\n  fetch(\"https://codingplatformbackend.herokuapp.com/codingPlatform/fetchQuestion?key=SHARED_KEY\",{\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\"teamName\":teamName,\"answer\":\"ac\"})\r\n        })\r\n          .then(res => res.json())\r\n          .then(\r\n            (result) => {\r\n              if(result.status === \"Success\"){\r\n                  this.props.toggleQuestion();\r\n              }else if(result.status === \"Fail\"){\r\n                  alert(\"Something went wrong\");\r\n              }\r\n            }\r\n    )\r\n  }else{\r\n    this.props.history.push('/login');\r\n  }\r\n}\r\nhandleChange = (selectedOption) => {\r\n  this.setState({ selectedOption: selectedOption });\r\n}\r\n\r\nrender() {\r\n  return (\r\n    <div className=\"header\">\r\n      {this.state.toShowLoader===true?<div className=\"loadingScreen\">\r\n      <Loader\r\n         type=\"Circles\"\r\n         color=\"#3578E5\"\r\n         height={100}\r\n         width={100}\r\n      />\r\n      </div>:\r\n      <div>\r\n        <div className=\"codingQuestion\">{this.state.codeStatement}</div>\r\n        <div className=\"codeDescription\">{this.state.codeDescription}</div>\r\n        <div className=\"codeInputType\">Constraints{this.state.codeInputFormat.map((i,key) => {\r\n            return <div key={key}>{i}</div>;\r\n        })}</div>\r\n        <div className=\"codeOutputType\">Input{this.state.example.map((i,key) => {\r\n            return <div key={key}>{i}</div>;\r\n        })}</div>\r\n        <div className=\"codeOutputType\">Expected Output{this.state.codeOutputFormat.map((i,key) => {\r\n            return <div key={key}>{i}</div>;\r\n        })}</div>\r\n        <Select\r\n            className=\"availableLanguage\"\r\n            onChange={this.handleChange}\r\n            options={this.state.oAvailableLanguage}\r\n            placeholder={this.state.placeHolder}\r\n        />\r\n        <div className=\"\"><textarea className=\"codeInput\" type=\"text\" placeholder=\"Type your code here\" onChange={this.updateCode}/></div>\r\n        <div className=\"buttonHolder\">\r\n        <div className=\"codeAnswerButton\" onClick={this.compileCode}>Compile</div>\r\n        <div className=\"codeAnswerButton\" onClick={this.submitCode}>Submit</div>\r\n        </div>\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n}\r\nexport default Code;\r\n"]},"metadata":{},"sourceType":"module"}