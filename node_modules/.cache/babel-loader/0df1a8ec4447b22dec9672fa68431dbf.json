{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/GitHub/CodingPlatformFrontEnd/src/Code.js\";\nimport React from 'react';\nimport './Register.css';\nimport Loader from 'react-loader-spinner';\nimport cookie from 'react-cookies';\n\nvar hackerEarth = require('hackerearth-node'); //require the Library\n//Now set your application \n\n\nvar hackerEarth = new hackerEarth('f3c1455800df92db6737d087ac0c93424bbe1e40', //Your Client Secret Key here this is mandatory\n1 //mode sync=1 or async(optional)=0 or null async is by default and preferred for nodeJS\n);\nvar config = {};\nconfig.time_limit = 1; //your time limit in integer\n\nconfig.memory_limit = 323244; //your memory limit in integer\n\nconfig.source = 'print(\"Hello\")'; //your source code for which you want to use hackerEarth api\n\nconfig.input = \"\"; //input against which you have to test your source code\n\nconfig.language = \"Py\"; //optional choose any one of them or none\n\nclass Code extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      codeStatement: '',\n      codeDescription: '',\n      toShowLoader: false,\n      questionType: ''\n    };\n  }\n\n  componentDidMount() {\n    var teamName = cookie.load('teamName');\n\n    if (teamName !== null && teamName !== undefined && teamName !== \"\") {\n      fetch(\"http://localhost:8080/codingPlatform/fetchQuestion?key=SHARED_KEY\", {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          \"teamName\": teamName\n        })\n      }).then(res => res.json()).then(result => {\n        if (result.status === \"Success\") {\n          this.setState({\n            puzzleStatement: result.puzzleStatement,\n            puzzleDescription: result.puzzleDescription,\n            questionType: result.questionType\n          });\n        } else if (result.status === \"Fail\") {\n          alert(\"Something went wrong\");\n        }\n      });\n    } else {\n      this.props.history.push('/login');\n    }\n  }\n\n  compileCode() {\n    hackerEarth.compile(config).then(result => {\n      console.log(result);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"codingQuestion\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"hello world\"), React.createElement(\"div\", {\n      className: \"codeDescription\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"hello world\"), React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      className: \"codeInput\",\n      type: \"text\",\n      placeholder: \"Insert your code here\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"buttonHolder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"puzzleAnswerButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Compile\"), React.createElement(\"div\", {\n      className: \"puzzleAnswerButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nexport default Code;","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/CodingPlatformFrontEnd/src/Code.js"],"names":["React","Loader","cookie","hackerEarth","require","config","time_limit","memory_limit","source","input","language","Code","Component","constructor","props","state","codeStatement","codeDescription","toShowLoader","questionType","componentDidMount","teamName","load","undefined","fetch","headers","method","body","JSON","stringify","then","res","json","result","status","setState","puzzleStatement","puzzleDescription","alert","history","push","compileCode","compile","console","log","catch","err","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Register.css';\nimport Loader from 'react-loader-spinner';\nimport cookie from 'react-cookies';\n\nvar hackerEarth=require('hackerearth-node'); //require the Library\n//Now set your application \nvar hackerEarth=new hackerEarth(\n        'f3c1455800df92db6737d087ac0c93424bbe1e40',  //Your Client Secret Key here this is mandatory\n        1  //mode sync=1 or async(optional)=0 or null async is by default and preferred for nodeJS\n);\nvar config={};\nconfig.time_limit=1;  //your time limit in integer\nconfig.memory_limit=323244;  //your memory limit in integer\nconfig.source='print(\"Hello\")';  //your source code for which you want to use hackerEarth api\nconfig.input=\"\";  //input against which you have to test your source code\nconfig.language=\"Py\"; //optional choose any one of them or none\n\nclass Code extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      codeStatement:'',\n      codeDescription:'',\n      toShowLoader:false,\n      questionType:''\n    };\n}\ncomponentDidMount(){\n  var teamName=cookie.load('teamName');\n  if(teamName!==null&&teamName!==undefined&&teamName!==\"\"){\n  fetch(\"http://localhost:8080/codingPlatform/fetchQuestion?key=SHARED_KEY\",{\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          method: \"POST\",\n          body: JSON.stringify({\"teamName\":teamName})\n        })\n          .then(res => res.json())\n          .then(\n            (result) => {\n              if(result.status === \"Success\"){\n                this.setState({puzzleStatement:result.puzzleStatement,puzzleDescription:result.puzzleDescription,questionType:result.questionType});\n              }else if(result.status === \"Fail\"){\n                  alert(\"Something went wrong\");\n              }\n            }\n    )\n  }else{\n    this.props.history.push('/login');\n  }\n}\ncompileCode(){\n    hackerEarth.compile(config)\n                        .then(result => {\n                          console.log(result);\n                        })\n                        .catch(err => {\n                            console.log(err);\n                        });\n}\n\nrender() {\n  return (\n    <div className=\"header\">\n        <div className=\"codingQuestion\">hello world</div>\n        <div className=\"codeDescription\">hello world</div>\n        <div className=\"\"><textarea className=\"codeInput\" type=\"text\" placeholder=\"Insert your code here\"/></div>\n        <div className=\"buttonHolder\">\n        <div className=\"puzzleAnswerButton\">Compile</div>\n        <div className=\"puzzleAnswerButton\">Submit</div>\n        </div>\n    </div>\n  );\n}\n}\nexport default Code;\n"]},"metadata":{},"sourceType":"module"}