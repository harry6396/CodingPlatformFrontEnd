{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prabhaty\\\\Desktop\\\\CodingPlatformFrontEnd\\\\src\\\\Question.js\";\nimport React from 'react';\nimport './Register.css';\nimport cookie from 'react-cookies';\nimport Puzzle from './Puzzle.js';\nimport Code from './Code.js';\n\nclass Question extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      code: '',\n      isPuzzleCode: true,\n      questionType: '',\n      questionNumber: '',\n      time: {}\n    };\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n    this.onEndTest = this.onEndTest.bind(this);\n    this.checkProgress = this.checkProgress.bind(this);\n    this.openTimer = this.openTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n  }\n\n  secondsToTime(secs) {\n    let hours = Math.floor(secs / (60 * 60));\n    let divisor_for_minutes = secs % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n    let obj = {\n      \"h\": hours,\n      \"m\": minutes,\n      \"s\": seconds\n    };\n    return obj;\n  }\n\n  componentDidMount() {\n    window.addEventListener('load', this.handleLoad);\n    this.checkProgress();\n  }\n\n  openTimer() {\n    let timeLeftVar = this.secondsToTime(cookie.load('challengeTime'));\n    this.setState({\n      time: timeLeftVar\n    });\n    this.startTimer();\n  }\n\n  startTimer() {\n    if (this.timer == 0 && this.state.seconds > 0) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n\n  stopTimer() {\n    this.setState({\n      timer: undefined\n    });\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds = this.state.seconds - 1;\n    this.setState({\n      time: this.secondsToTime(seconds),\n      seconds: seconds\n    }); // Check if we're at zero.\n\n    if (seconds == 0) {\n      clearInterval(this.timer);\n      this.onEndTest();\n    }\n  }\n\n  checkProgress() {\n    var teamName = cookie.load('teamName');\n\n    if (teamName !== null && teamName !== undefined && teamName !== \"\") {\n      fetch(\"https://codingplatformbackend.herokuapp.com/codingPlatform/fetchProgress?key=SHARED_KEY\", {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          \"teamName\": teamName\n        })\n      }).then(res => res.json()).then(result => {\n        if (result.status === \"Success\") {\n          if (result.questionNumber === \"4\") {\n            this.props.history.length = -1;\n            this.props.history.push('/CompleteTestPage');\n          } else {\n            this.setState({\n              questionType: result.questionType,\n              questionNumber: result.questionNumber\n            });\n            this.openTimer();\n          }\n        } else if (result.status === \"Fail\") {\n          alert(\"Something went wrong\");\n        }\n      });\n    } else {\n      this.props.history.push('/login');\n    }\n  }\n\n  onEndTest() {\n    var teamName = cookie.load('teamName');\n    fetch(\"https://codingplatformbackend.herokuapp.com/codingPlatform/finalSubmission?key=SHARED_KEY\", {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        \"teamName\": teamName,\n        \"completionTime\": this.state.seconds\n      })\n    }).then(res => res.json()).then(result => {\n      if (result.status === \"Success\") {\n        this.setState({\n          questionType: result.questionType\n        });\n      } else if (result.status === \"Fail\") {\n        alert(\"Something went wrong\");\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"challengeHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"challengeHeaderMessage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Break the ENGIMA\"), React.createElement(\"div\", {\n      className: \"challengeTimer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, this.state.time.h, \" : \", this.state.time.m, \" : \", this.state.time.s), React.createElement(\"div\", {\n      className: \"endTestButton\",\n      onClick: this.onEndTest,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"End Test\")), React.createElement(\"div\", {\n      className: \"challengeBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, this.state.questionType === \"P\" ? React.createElement(Puzzle, {\n      timer: this.state.seconds,\n      toggleQuestion: this.checkProgress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }) : this.state.questionType === \"C\" ? React.createElement(Code, {\n      timer: this.state.seconds,\n      toggleQuestion: this.checkProgress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Question;","map":{"version":3,"sources":["C:/Users/prabhaty/Desktop/CodingPlatformFrontEnd/src/Question.js"],"names":["React","cookie","Puzzle","Code","Question","Component","constructor","props","state","code","isPuzzleCode","questionType","questionNumber","time","timer","startTimer","bind","countDown","onEndTest","checkProgress","openTimer","stopTimer","secondsToTime","secs","hours","Math","floor","divisor_for_minutes","minutes","divisor_for_seconds","seconds","ceil","obj","componentDidMount","window","addEventListener","handleLoad","timeLeftVar","load","setState","setInterval","undefined","clearInterval","teamName","fetch","headers","method","body","JSON","stringify","then","res","json","result","status","history","length","push","alert","render","h","m","s"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './Register.css';\r\nimport cookie from 'react-cookies';\r\nimport Puzzle from './Puzzle.js';\r\nimport Code from './Code.js';\r\n\r\nclass Question extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        code:'',\r\n        isPuzzleCode:true,\r\n        questionType:'',\r\n        questionNumber:'',\r\n        time: {}\r\n    };\r\n    this.timer = 0;\r\n    this.startTimer = this.startTimer.bind(this);\r\n    this.countDown = this.countDown.bind(this);\r\n    this.onEndTest = this.onEndTest.bind(this);\r\n    this.checkProgress = this.checkProgress.bind(this);\r\n    this.openTimer = this.openTimer.bind(this);\r\n    this.stopTimer = this.stopTimer.bind(this);\r\n}\r\nsecondsToTime(secs){\r\n  let hours = Math.floor(secs / (60 * 60));\r\n\r\n  let divisor_for_minutes = secs % (60 * 60);\r\n  let minutes = Math.floor(divisor_for_minutes / 60);\r\n\r\n  let divisor_for_seconds = divisor_for_minutes % 60;\r\n  let seconds = Math.ceil(divisor_for_seconds);\r\n\r\n  let obj = {\r\n    \"h\": hours,\r\n    \"m\": minutes,\r\n    \"s\": seconds\r\n  };\r\n  return obj;\r\n}\r\n\r\ncomponentDidMount(){\r\n  window.addEventListener('load', this.handleLoad);\r\n  this.checkProgress();\r\n}\r\n\r\nopenTimer(){\r\n  let timeLeftVar = this.secondsToTime(cookie.load('challengeTime'));\r\n  this.setState({ time: timeLeftVar });\r\n  this.startTimer();\r\n}\r\n\r\nstartTimer() {\r\n  if (this.timer == 0 && this.state.seconds > 0) {\r\n    this.timer = setInterval(this.countDown, 1000);\r\n  }\r\n}\r\n\r\nstopTimer(){\r\n  this.setState({timer:undefined});\r\n}\r\n\r\ncountDown() {\r\n  // Remove one second, set state so a re-render happens.\r\n  let seconds = this.state.seconds - 1;\r\n  this.setState({\r\n    time: this.secondsToTime(seconds),\r\n    seconds: seconds,\r\n  });\r\n  \r\n  // Check if we're at zero.\r\n  if (seconds == 0) { \r\n    clearInterval(this.timer);\r\n    this.onEndTest();\r\n  }\r\n}\r\ncheckProgress(){\r\n  var teamName=cookie.load('teamName');\r\n  if(teamName!==null&&teamName!==undefined&&teamName!==\"\"){\r\n  fetch(\"https://codingplatformbackend.herokuapp.com/codingPlatform/fetchProgress?key=SHARED_KEY\",{\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\"teamName\":teamName})\r\n        })\r\n          .then(res => res.json())\r\n          .then(\r\n            (result) => {\r\n              if(result.status === \"Success\"){\r\n                if(result.questionNumber === \"4\"){\r\n                  this.props.history.length = -1;\r\n                  this.props.history.push('/CompleteTestPage');\r\n                }\r\n                else{\r\n                  this.setState({questionType:result.questionType,questionNumber:result.questionNumber});\r\n                  this.openTimer();\r\n                }\r\n              }else if(result.status === \"Fail\"){\r\n                  alert(\"Something went wrong\");\r\n              }\r\n            }\r\n    )\r\n  }else{\r\n    this.props.history.push('/login');\r\n  }\r\n}\r\n\r\nonEndTest(){\r\n  var teamName=cookie.load('teamName');\r\n  fetch(\"https://codingplatformbackend.herokuapp.com/codingPlatform/finalSubmission?key=SHARED_KEY\",{\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\"teamName\":teamName,\"completionTime\":this.state.seconds})\r\n        })\r\n          .then(res => res.json())\r\n          .then(\r\n            (result) => {\r\n              if(result.status === \"Success\"){\r\n                this.setState({questionType:result.questionType});\r\n              }else if(result.status === \"Fail\"){\r\n                  alert(\"Something went wrong\");\r\n              }\r\n            }\r\n    )\r\n}\r\n\r\n\r\n\r\nrender() {\r\n  return (\r\n    <div className=\"\">\r\n        <div className=\"challengeHeader\">\r\n            <div className=\"challengeHeaderMessage\">Break the ENGIMA</div>\r\n            <div className=\"challengeTimer\">{this.state.time.h} : {this.state.time.m} : {this.state.time.s}</div>\r\n            <div className=\"endTestButton\" onClick={this.onEndTest}>End Test</div>\r\n        </div>\r\n        <div className=\"challengeBody\">\r\n            {this.state.questionType===\"P\"?\r\n            <Puzzle timer = {this.state.seconds} toggleQuestion={this.checkProgress}/>:this.state.questionType===\"C\"?\r\n            <Code timer = {this.state.seconds} toggleQuestion={this.checkProgress}/>:<div></div>}\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n}\r\nexport default Question;\r\n"]},"metadata":{},"sourceType":"module"}