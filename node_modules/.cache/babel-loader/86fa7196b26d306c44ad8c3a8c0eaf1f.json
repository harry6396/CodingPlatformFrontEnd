{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/GitHub/CodingPlatformFrontEnd/src/Code.js\";\nimport React from 'react';\nimport './Register.css';\nimport Loader from 'react-loader-spinner';\nimport cookie from 'react-cookies';\n\nvar hackerEarth = require('hackerearth-node'); //require the Library\n//Now set your application \n\n\nvar hackerEarth = new hackerEarth('f3c1455800df92db6737d087ac0c93424bbe1e40', //Your Client Secret Key here this is mandatory\n1 //mode sync=1 or async(optional)=0 or null async is by default and preferred for nodeJS\n);\nvar config = {};\nconfig.time_limit = 1; //your time limit in integer\n\nconfig.memory_limit = 323244; //your memory limit in integer\n\nconfig.source = 'print(\"Hello\")'; //your source code for which you want to use hackerEarth api\n\nconfig.input = \"\"; //input against which you have to test your source code\n\nconfig.language = \"Py\"; //optional choose any one of them or none\n\nclass Code extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      codeStatement: '',\n      codeDescription: '',\n      codeInputFormat: [],\n      codeOutputFormat: [],\n      codeTestCases: '',\n      toShowLoader: false,\n      questionType: '',\n      codeOutput: '',\n      codeInput: '',\n      example: []\n    };\n    this.compileCode = this.compileCode.bind(this);\n    this.submitCode = this.submitCode.bind(this);\n    this.submitScore = this.submitScore.bind(this);\n    this.updateCode = this.updateCode.bind(this);\n    this.splitCodeInput = this.splitCodeInput.bind(this);\n    this.splitCodeOutput = this.splitCodeOutput.bind(this);\n    this.splitCodeExample = this.splitCodeExample.bind(this);\n  }\n\n  componentDidMount() {\n    var teamName = cookie.load('teamName');\n\n    if (teamName !== null && teamName !== undefined && teamName !== \"\") {\n      fetch(\"http://localhost:8080/codingPlatform/fetchQuestion?key=SHARED_KEY\", {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          \"teamName\": teamName\n        })\n      }).then(res => res.json()).then(result => {\n        if (result.status === \"Success\" && result.problemStatement !== \"7\") {\n          this.splitCodeInput(result.questionInputFormat);\n          this.splitCodeOutput(result.questionOutputFormat);\n          this.splitCodeExample(result.example);\n          this.setState({\n            codeStatement: result.problemStatement,\n            codeDescription: result.problemDescription\n          });\n        } else if (result.problemStatement === \"7\") {\n          alert(\"Test Completed\");\n        } else if (result.status === \"Fail\") {\n          alert(\"Something went wrong\");\n        }\n      });\n    } else {\n      this.props.history.push('/login');\n    }\n  }\n\n  updateCode(event) {\n    this.setState({\n      codeInput: event.target.value\n    });\n  }\n\n  splitCodeInput(questionInputFormat) {\n    var delimiter = \"$_$\";\n    var output = questionInputFormat.split(delimiter);\n    this.setState({\n      codeInputFormat: output\n    });\n  }\n\n  splitCodeOutput(questionInputFormat) {\n    var delimiter = \"$_$\";\n    var output = questionInputFormat.split(delimiter);\n    this.setState({\n      codeOutputFormat: output\n    });\n  }\n\n  splitCodeExample(questionInputFormat) {}\n\n  compileCode() {// hackerEarth.compile(config)\n    //                     .then(result => {\n    //                       console.log(result);\n    //                       this.submitCode();\n    //                     })\n    //                     .catch(err => {\n    //                         console.log(err);\n    //                     });\n    // fetch(\"https://api.hackerearth.com/v3/code/compile/\",{\n    //           headers: {\n    //             'Accept': 'application/json',\n    //             'Content-Type': 'application/json',\n    //             'Access-Control-Allow-Origin': '*'\n    //           },\n    //           method: \"POST\",\n    //           body: JSON.stringify({\"client_secret\": \"f3c1455800df92db6737d087ac0c93424bbe1e40\",\n    //             \"async\": 1,\n    //             \"source\": \"print(\\\"Hello\\\")\",\n    //             \"lang\": \"PYTHON\",\n    //             \"input\": \"\",\n    //             \"time_limit\": 1,\n    //             \"memory_limit\": 323244})\n    //         })\n    //           .then(res => res.json())\n    //           .then(\n    //             (result) => {\n    //               if(result.status === \"Success\"){\n    //                   this.props.toggleQuestion();\n    //               }else if(result.status === \"Fail\"){\n    //                   alert(\"Something went wrong\");\n    //               }\n    //             }\n    //     )\n  }\n\n  submitCode() {\n    // hackerEarth.run(config)\n    //                   .then(result => {\n    //                     this.submitScore();\n    //                   })\n    //                   .catch(err => {\n    //                     alert(err);\n    //                   });\n    this.submitScore();\n  }\n\n  submitScore() {\n    var teamName = cookie.load('teamName');\n\n    if (teamName !== null && teamName !== undefined && teamName !== \"\") {\n      fetch(\"http://localhost:8080/codingPlatform/fetchQuestion?key=SHARED_KEY\", {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          \"teamName\": teamName,\n          \"answer\": \"ac\"\n        })\n      }).then(res => res.json()).then(result => {\n        if (result.status === \"Success\") {\n          this.props.toggleQuestion();\n        } else if (result.status === \"Fail\") {\n          alert(\"Something went wrong\");\n        }\n      });\n    } else {\n      this.props.history.push('/login');\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"codingQuestion\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, this.state.codeStatement), React.createElement(\"div\", {\n      className: \"codeDescription\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, this.state.codeDescription), React.createElement(\"div\", {\n      className: \"codeInputType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Input Type\", this.state.codeInputFormat.map((i, key) => {\n      return React.createElement(\"div\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, i);\n    })), React.createElement(\"div\", {\n      className: \"codeOutputType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Output Type\", this.state.codeOutputFormat.map((i, key) => {\n      return React.createElement(\"div\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, i);\n    })), React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      className: \"codeInput\",\n      type: \"text\",\n      placeholder: \"Type your code here\",\n      onChange: this.updateCode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"buttonHolder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"puzzleAnswerButton\",\n      onClick: this.compileCode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"Compile\"), React.createElement(\"div\", {\n      className: \"puzzleAnswerButton\",\n      onClick: this.submitCode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nexport default Code;","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/CodingPlatformFrontEnd/src/Code.js"],"names":["React","Loader","cookie","hackerEarth","require","config","time_limit","memory_limit","source","input","language","Code","Component","constructor","props","state","codeStatement","codeDescription","codeInputFormat","codeOutputFormat","codeTestCases","toShowLoader","questionType","codeOutput","codeInput","example","compileCode","bind","submitCode","submitScore","updateCode","splitCodeInput","splitCodeOutput","splitCodeExample","componentDidMount","teamName","load","undefined","fetch","headers","method","body","JSON","stringify","then","res","json","result","status","problemStatement","questionInputFormat","questionOutputFormat","setState","problemDescription","alert","history","push","event","target","value","delimiter","output","split","toggleQuestion","render","map","i","key"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Register.css';\nimport Loader from 'react-loader-spinner';\nimport cookie from 'react-cookies';\n\nvar hackerEarth=require('hackerearth-node'); //require the Library\n//Now set your application \nvar hackerEarth=new hackerEarth(\n        'f3c1455800df92db6737d087ac0c93424bbe1e40',  //Your Client Secret Key here this is mandatory\n        1  //mode sync=1 or async(optional)=0 or null async is by default and preferred for nodeJS\n);\nvar config={};\nconfig.time_limit=1;  //your time limit in integer\nconfig.memory_limit=323244;  //your memory limit in integer\nconfig.source='print(\"Hello\")';  //your source code for which you want to use hackerEarth api\nconfig.input=\"\";  //input against which you have to test your source code\nconfig.language=\"Py\"; //optional choose any one of them or none\n\nclass Code extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      codeStatement:'',\n      codeDescription:'',\n      codeInputFormat:[],\n      codeOutputFormat:[],\n      codeTestCases:'',\n      toShowLoader:false,\n      questionType:'',\n      codeOutput:'',\n      codeInput:'',\n      example:[]\n    };\n    this.compileCode = this.compileCode.bind(this);\n    this.submitCode = this.submitCode.bind(this);\n    this.submitScore = this.submitScore.bind(this);\n    this.updateCode = this.updateCode.bind(this);\n    this.splitCodeInput = this.splitCodeInput.bind(this);\n    this.splitCodeOutput = this.splitCodeOutput.bind(this);\n    this.splitCodeExample = this.splitCodeExample.bind(this);\n}\ncomponentDidMount(){\n  var teamName=cookie.load('teamName');\n  if(teamName!==null&&teamName!==undefined&&teamName!==\"\"){\n  fetch(\"http://localhost:8080/codingPlatform/fetchQuestion?key=SHARED_KEY\",{\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          method: \"POST\",\n          body: JSON.stringify({\"teamName\":teamName})\n        })\n          .then(res => res.json())\n          .then(\n            (result) => {\n              if(result.status === \"Success\"&&result.problemStatement!==\"7\"){\n                this.splitCodeInput(result.questionInputFormat);\n                this.splitCodeOutput(result.questionOutputFormat);\n                this.splitCodeExample(result.example);\n                this.setState({codeStatement:result.problemStatement,codeDescription:result.problemDescription});\n              }else if(result.problemStatement===\"7\"){\n                alert(\"Test Completed\");\n              }\n              else if(result.status === \"Fail\"){\n                  alert(\"Something went wrong\");\n              }\n            }\n    )\n  }else{\n    this.props.history.push('/login');\n  }\n}\nupdateCode(event){\n  this.setState({codeInput:event.target.value});\n}\nsplitCodeInput(questionInputFormat){\n  var delimiter=\"$_$\";\n  var output = questionInputFormat.split(delimiter);\n  this.setState({codeInputFormat:output});\n}\nsplitCodeOutput(questionInputFormat){\n  var delimiter=\"$_$\";\n  var output = questionInputFormat.split(delimiter);\n  this.setState({codeOutputFormat:output});\n}\nsplitCodeExample(questionInputFormat){\n\n}\ncompileCode(){\n    // hackerEarth.compile(config)\n    //                     .then(result => {\n    //                       console.log(result);\n    //                       this.submitCode();\n    //                     })\n    //                     .catch(err => {\n    //                         console.log(err);\n    //                     });\n// fetch(\"https://api.hackerearth.com/v3/code/compile/\",{\n//           headers: {\n//             'Accept': 'application/json',\n//             'Content-Type': 'application/json',\n//             'Access-Control-Allow-Origin': '*'\n//           },\n//           method: \"POST\",\n//           body: JSON.stringify({\"client_secret\": \"f3c1455800df92db6737d087ac0c93424bbe1e40\",\n//             \"async\": 1,\n//             \"source\": \"print(\\\"Hello\\\")\",\n//             \"lang\": \"PYTHON\",\n//             \"input\": \"\",\n//             \"time_limit\": 1,\n//             \"memory_limit\": 323244})\n//         })\n//           .then(res => res.json())\n//           .then(\n//             (result) => {\n//               if(result.status === \"Success\"){\n//                   this.props.toggleQuestion();\n//               }else if(result.status === \"Fail\"){\n//                   alert(\"Something went wrong\");\n//               }\n//             }\n//     )\n}\nsubmitCode(){\n  // hackerEarth.run(config)\n  //                   .then(result => {\n  //                     this.submitScore();\n  //                   })\n  //                   .catch(err => {\n  //                     alert(err);\n  //                   });\n  this.submitScore();\n}\nsubmitScore(){\n  var teamName=cookie.load('teamName');\n  if(teamName!==null&&teamName!==undefined&&teamName!==\"\"){\n  fetch(\"http://localhost:8080/codingPlatform/fetchQuestion?key=SHARED_KEY\",{\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          method: \"POST\",\n          body: JSON.stringify({\"teamName\":teamName,\"answer\":\"ac\"})\n        })\n          .then(res => res.json())\n          .then(\n            (result) => {\n              if(result.status === \"Success\"){\n                  this.props.toggleQuestion();\n              }else if(result.status === \"Fail\"){\n                  alert(\"Something went wrong\");\n              }\n            }\n    )\n  }else{\n    this.props.history.push('/login');\n  }\n}\n\nrender() {\n  return (\n    <div className=\"header\">\n        <div className=\"codingQuestion\">{this.state.codeStatement}</div>\n        <div className=\"codeDescription\">{this.state.codeDescription}</div>\n        <div className=\"codeInputType\">Input Type{this.state.codeInputFormat.map((i,key) => {\n            return <div key={key}>{i}</div>;\n        })}</div>\n        <div className=\"codeOutputType\">Output Type{this.state.codeOutputFormat.map((i,key) => {\n            return <div key={key}>{i}</div>;\n        })}</div>\n        <div className=\"\"><textarea className=\"codeInput\" type=\"text\" placeholder=\"Type your code here\" onChange={this.updateCode}/></div>\n        <div className=\"buttonHolder\">\n        <div className=\"puzzleAnswerButton\" onClick={this.compileCode}>Compile</div>\n        <div className=\"puzzleAnswerButton\" onClick={this.submitCode}>Submit</div>\n        </div>\n    </div>\n  );\n}\n}\nexport default Code;\n"]},"metadata":{},"sourceType":"module"}