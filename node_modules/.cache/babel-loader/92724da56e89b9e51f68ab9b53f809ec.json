{"ast":null,"code":"'use strict';\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar rp = require('request-promise');\n\nvar debug = require('debug')('HE');\n\nrequire('babel-polyfill');\n\nvar helpers = function () {\n  function helpers() {\n    _classCallCheck(this, helpers);\n  }\n\n  _createClass(helpers, [{\n    key: 'getQueryData',\n    value: function getQueryData(_ref, clientSecret, mode) {\n      var language = _ref.language;\n      var time_limit = _ref.time_limit;\n      var memory_limit = _ref.memory_limit;\n      var source = _ref.source;\n      var input = _ref.input;\n      var obj = {\n        client_secret: clientSecret,\n        async: mode,\n        source: source,\n        lang: this.getLanuage(language),\n        input: input,\n        time_limit: time_limit || 1,\n        memory_limit: memory_limit || 262144\n      };\n      return obj;\n    }\n  }, {\n    key: 'getLanuage',\n    value: function getLanuage(language) {\n      var lang = void 0;\n\n      if (language === 'C++') {\n        lang = 'CPP';\n      } else if (language === 'C') {\n        lang = 'C';\n      } else if (language === 'Py') {\n        lang = 'PYTHON';\n      } else if (language === 'C#') {\n        lang = 'CSHARP';\n      } else {\n        lang = language.toUpperCase();\n      }\n\n      return lang;\n    }\n  }, {\n    key: 'getRequestPostJSON',\n    value: function getRequestPostJSON(data, url) {\n      return {\n        method: 'POST',\n        uri: url,\n        form: data,\n        gzip: true\n      };\n    }\n  }, {\n    key: 'doOperation',\n    value: function doOperation(rpData, callback) {\n      return new Promise(function (resolve, reject) {\n        rp(rpData).then(function (body) {\n          return body;\n        }).then(function (res) {\n          if (callback) {\n            callback(null, res);\n          }\n\n          resolve(res);\n        }).catch(function (err) {\n          if (callback) {\n            callback(err, null);\n          }\n\n          reject(err);\n        });\n      });\n    }\n  }]);\n\n  return helpers;\n}();\n\nvar HackerEarth = function (_helpers) {\n  _inherits(HackerEarth, _helpers);\n\n  function HackerEarth(clientSecret, mode) {\n    _classCallCheck(this, HackerEarth);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(HackerEarth).call(this));\n\n    _this._runURL = 'https://api.hackerearth.com/v3/code/run/';\n    _this._compileURL = 'https://api.hackerearth.com/v3/code/compile/';\n    _this._clientSecret = clientSecret;\n    _this._mode = mode || 0;\n    debug('Bootstraping HackerEarth module with clientSecret as %s and mode as %s', clientSecret, mode);\n    return _this;\n  }\n\n  _createClass(HackerEarth, [{\n    key: 'compile',\n    value: function compile(config, callback) {\n      var data = _get(Object.getPrototypeOf(HackerEarth.prototype), 'getQueryData', this).call(this, config, this.clientSecret, this.mode);\n\n      debug('In HackerEarth:Compile Data sent to API is %s', JSON.stringify(data));\n\n      var rpData = _get(Object.getPrototypeOf(HackerEarth.prototype), 'getRequestPostJSON', this).call(this, data, this.compileURL);\n\n      return _get(Object.getPrototypeOf(HackerEarth.prototype), 'doOperation', this).call(this, rpData, callback);\n    }\n  }, {\n    key: 'run',\n    value: function run(config, callback) {\n      var data = _get(Object.getPrototypeOf(HackerEarth.prototype), 'getQueryData', this).call(this, config, this.clientSecret, this.mode);\n\n      debug('In HackerEarth:Run Data sent to API is %s', JSON.stringify(data));\n\n      var rpData = _get(Object.getPrototypeOf(HackerEarth.prototype), 'getRequestPostJSON', this).call(this, data, this.runURL);\n\n      return _get(Object.getPrototypeOf(HackerEarth.prototype), 'doOperation', this).call(this, rpData, callback);\n    }\n  }, {\n    key: 'runURL',\n    get: function get() {\n      return this._runURL;\n    }\n  }, {\n    key: 'compileURL',\n    get: function get() {\n      return this._compileURL;\n    }\n  }, {\n    key: 'clientSecret',\n    get: function get() {\n      return this._clientSecret;\n    }\n  }, {\n    key: 'mode',\n    get: function get() {\n      return this._mode;\n    }\n  }]);\n\n  return HackerEarth;\n}(helpers);\n\nmodule.exports = HackerEarth;","map":null,"metadata":{},"sourceType":"script"}