{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prabhaty\\\\Desktop\\\\CodingPlatformFrontEnd\\\\src\\\\Login.js\";\nimport React from 'react';\nimport './Register.css';\nimport Loader from 'react-loader-spinner';\nimport cookie from 'react-cookies';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      teamName: '',\n      passCode: ''\n    };\n    this.checkTeam = this.checkTeam.bind(this);\n    this.saveChallengeData = this.saveChallengeData.bind(this);\n    this.handleTeam = this.handleTeam.bind(this);\n    this.handlePassCode = this.handlePassCode.bind(this);\n  }\n\n  handleTeam(event) {\n    this.setState({\n      teamName: event.target.value\n    });\n  }\n\n  handlePassCode(event) {\n    this.setState({\n      passCode: event.target.value\n    });\n  }\n\n  componentDidMount() {\n    var temaName = cookie.load('teamName');\n\n    if (temaName !== null && temaName !== undefined && temaName !== \"\") {\n      this.props.history.push('/challenge');\n    }\n  }\n\n  checkTeam() {\n    if (this.state.teamName.length > 0 && this.state.passCode.length > 0) {\n      this.setState({\n        toShowLoader: true\n      });\n      fetch(\"https://codingplatformbackend.herokuapp.com/codingPlatform/login?key=SHARED_KEY\", {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          \"teamName\": this.state.teamName,\n          \"passCode\": this.state.teamName,\n          \"status\": null\n        })\n      }).then(res => res.json()).then(result => {\n        if (result.status === \"Success\") {\n          this.saveChallengeData(result.teamName);\n        } else if (result.status === \"Fail\") {\n          this.setState({\n            toShowLoader: false\n          });\n          alert(\"Wrong team name or passcode or already completed the test\");\n        }\n      });\n    } else if (this.state.teamName.length === 0) {\n      alert(\"Team name cannot be empty\");\n    } else if (this.state.passCode.length === 0) {\n      alert(\"Passcode cannot be empty\");\n    }\n  }\n\n  saveChallengeData(challengeData) {\n    cookie.save('teamName', challengeData, {\n      path: '/'\n    });\n    this.setState({\n      toShowLoader: false\n    });\n    this.props.history.push('/challenge');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"headerBackground\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Break the ENGIMA\"), React.createElement(\"div\", {\n      className: \"quote\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"\\u201CThose who can imagine anything, can create the impossible.\\u201D \\u2015 Alan Turing\")), React.createElement(\"div\", {\n      className: \"registerForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"teamName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Team Name\"), React.createElement(\"div\", {\n      className: \"teamNameDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"teamID\",\n      placeholder: \"Enter team name\",\n      type: \"text\",\n      className: \"teamNameInput\",\n      onChange: this.handleTeam,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"teamName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Team Passcode\"), React.createElement(\"div\", {\n      className: \"teamNameDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"teampasscode\",\n      placeholder: \"Enter passcode\",\n      type: \"password\",\n      className: \"teamNameInput\",\n      onChange: this.handlePassCode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"submitDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"submitButton\",\n      onClick: this.checkTeam,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Login\"))), this.state.toShowLoader === true ? React.createElement(\"div\", {\n      className: \"loaderDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      type: \"Circles\",\n      color: \"#3578E5\",\n      height: 50,\n      width: 50,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["C:/Users/prabhaty/Desktop/CodingPlatformFrontEnd/src/Login.js"],"names":["React","Loader","cookie","Login","Component","constructor","props","state","teamName","passCode","checkTeam","bind","saveChallengeData","handleTeam","handlePassCode","event","setState","target","value","componentDidMount","temaName","load","undefined","history","push","length","toShowLoader","fetch","headers","method","body","JSON","stringify","then","res","json","result","status","alert","challengeData","save","path","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './Register.css';\r\nimport Loader from 'react-loader-spinner';\r\nimport cookie from 'react-cookies';\r\n\r\nclass Login extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      teamName:'',\r\n      passCode:''\r\n    };\r\n    this.checkTeam = this.checkTeam.bind(this);\r\n    this.saveChallengeData = this.saveChallengeData.bind(this);\r\n    this.handleTeam = this.handleTeam.bind(this);\r\n    this.handlePassCode = this.handlePassCode.bind(this);\r\n}\r\n\r\nhandleTeam(event){\r\n    this.setState({teamName:event.target.value});\r\n}\r\n\r\nhandlePassCode(event){\r\n    this.setState({passCode:event.target.value});\r\n}\r\ncomponentDidMount(){\r\n  var temaName = cookie.load('teamName');\r\n  if(temaName!==null && temaName!==undefined && temaName !== \"\"){\r\n    this.props.history.push('/challenge');\r\n  }\r\n}\r\n\r\ncheckTeam(){\r\n    if(this.state.teamName.length>0&&this.state.passCode.length>0){\r\n        this.setState({toShowLoader:true});\r\n        fetch(\"https://codingplatformbackend.herokuapp.com/codingPlatform/login?key=SHARED_KEY\",{\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\"teamName\":this.state.teamName,\"passCode\":this.state.teamName,\"status\":null})\r\n        })\r\n          .then(res => res.json())\r\n          .then(\r\n            (result) => {\r\n              if(result.status === \"Success\"){\r\n                this.saveChallengeData(result.teamName);\r\n              }else if(result.status === \"Fail\"){\r\n                this.setState({toShowLoader:false});\r\n                  alert(\"Wrong team name or passcode or already completed the test\");\r\n              }\r\n            }\r\n          )\r\n      }else if(this.state.teamName.length===0){\r\n        alert(\"Team name cannot be empty\");\r\n      }else if(this.state.passCode.length===0){\r\n        alert(\"Passcode cannot be empty\");\r\n      }\r\n}\r\n\r\nsaveChallengeData(challengeData){\r\n    cookie.save('teamName', challengeData, { path: '/' });\r\n    this.setState({toShowLoader:false});\r\n    this.props.history.push('/challenge');\r\n}\r\n\r\nrender() {\r\n  return (\r\n    <div className=\"header\">\r\n        <div className=\"headerBackground\">\r\n        <div className=\"heading\">Break the ENGIMA</div>\r\n        <div className=\"quote\">“Those who can imagine anything, can create the impossible.”\r\n            ― Alan Turing</div>\r\n        </div>\r\n        <div className=\"registerForm\">\r\n            <div className=\"teamName\">Team Name</div>\r\n            <div className=\"teamNameDiv\">\r\n              <input id=\"teamID\" placeholder=\"Enter team name\" type=\"text\" className=\"teamNameInput\" onChange={this.handleTeam}/>\r\n            </div>\r\n            <div className=\"teamName\">Team Passcode</div>\r\n            <div className=\"teamNameDiv\">\r\n              <input id=\"teampasscode\" placeholder=\"Enter passcode\" type=\"password\" className=\"teamNameInput\" onChange={this.handlePassCode}/>\r\n            </div>\r\n            <div className=\"submitDiv\"><div className=\"submitButton\" onClick={this.checkTeam}>Login</div></div>\r\n        </div>\r\n        {this.state.toShowLoader===true?<div className=\"loaderDiv\"><Loader\r\n         type=\"Circles\"\r\n         color=\"#3578E5\"\r\n         height={50}\r\n         width={50}\r\n         /></div>:<div></div>}\r\n    </div>\r\n  );\r\n}\r\n}\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}