{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/GitHub/CodingPlatformFrontEnd/src/Question.js\";\nimport React from 'react';\nimport './Register.css';\nimport cookie from 'react-cookies';\nimport Timer from 'react-compound-timer';\nimport Puzzle from './Puzzle.js';\nimport Code from './Code.js';\nimport CompleteTestPage from './CompleteTestPage.js';\n\nclass Question extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      code: '',\n      isPuzzleCode: true,\n      questionType: '',\n      questionNumber: ''\n    };\n    this.onEndTest = this.onEndTest.bind(this);\n    this.checkProgress = this.checkProgress.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n  }\n\n  componentDidMount() {\n    this.checkProgress();\n  }\n\n  stopTimer() {}\n\n  checkProgress() {\n    var teamName = cookie.load('teamName');\n\n    if (teamName !== null && teamName !== undefined && teamName !== \"\") {\n      fetch(\"http://localhost:8080/codingPlatform/fetchProgress?key=SHARED_KEY\", {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          \"teamName\": teamName\n        })\n      }).then(res => res.json()).then(result => {\n        if (result.status === \"Success\") {\n          if (result.questionNumber === \"7\") {\n            this.props.history.push('/CompleteTestPage');\n          } else {\n            this.setState({\n              questionType: result.questionType,\n              questionNumber: result.questionNumber\n            });\n          }\n        } else if (result.status === \"Fail\") {\n          alert(\"Something went wrong\");\n        }\n      });\n    } else {\n      this.props.history.push('/login');\n    }\n  }\n\n  onEndTest() {\n    var teamName = cookie.load('teamName');\n    fetch(\"http://localhost:8080/codingPlatform/finalSubmission?key=SHARED_KEY\", {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        \"teamName\": teamName,\n        \"completionTime\": \"0\"\n      })\n    }).then(res => res.json()).then(result => {\n      if (result.status === \"Success\") {\n        this.setState({\n          questionType: result.questionType\n        });\n      } else if (result.status === \"Fail\") {\n        alert(\"Something went wrong\");\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"challengeHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"challengeHeaderMessage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Break the ENGIMA\"), React.createElement(\"div\", {\n      className: \"challengeTimer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"HH:MM:SS:\")), React.createElement(\"div\", {\n      className: \"challengeBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, this.state.questionType === \"P\" ? React.createElement(Puzzle, {\n      toggleQuestion: this.checkProgress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }) : React.createElement(Code, {\n      toggleQuestion: this.checkProgress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Question;","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/CodingPlatformFrontEnd/src/Question.js"],"names":["React","cookie","Timer","Puzzle","Code","CompleteTestPage","Question","Component","constructor","props","state","code","isPuzzleCode","questionType","questionNumber","onEndTest","bind","checkProgress","stopTimer","componentDidMount","teamName","load","undefined","fetch","headers","method","body","JSON","stringify","then","res","json","result","status","history","push","setState","alert","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Register.css';\nimport cookie from 'react-cookies';\nimport Timer from 'react-compound-timer';\nimport Puzzle from './Puzzle.js';\nimport Code from './Code.js';\nimport CompleteTestPage from './CompleteTestPage.js';\n\nclass Question extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        code:'',\n        isPuzzleCode:true,\n        questionType:'',\n        questionNumber:''\n    };\n    this.onEndTest = this.onEndTest.bind(this);\n    this.checkProgress = this.checkProgress.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n}\ncomponentDidMount(){\n  this.checkProgress();\n}\n\nstopTimer(){\n\n}\n\ncheckProgress(){\n  var teamName=cookie.load('teamName');\n  if(teamName!==null&&teamName!==undefined&&teamName!==\"\"){\n  fetch(\"http://localhost:8080/codingPlatform/fetchProgress?key=SHARED_KEY\",{\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          method: \"POST\",\n          body: JSON.stringify({\"teamName\":teamName})\n        })\n          .then(res => res.json())\n          .then(\n            (result) => {\n              if(result.status === \"Success\"){\n                if(result.questionNumber === \"7\"){\n                  this.props.history.push('/CompleteTestPage');\n                }\n                else{\n                  this.setState({questionType:result.questionType,questionNumber:result.questionNumber});\n                }\n              }else if(result.status === \"Fail\"){\n                  alert(\"Something went wrong\");\n              }\n            }\n    )\n  }else{\n    this.props.history.push('/login');\n  }\n}\n\nonEndTest(){\n  var teamName=cookie.load('teamName');\n  fetch(\"http://localhost:8080/codingPlatform/finalSubmission?key=SHARED_KEY\",{\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          method: \"POST\",\n          body: JSON.stringify({\"teamName\":teamName,\"completionTime\":\"0\"})\n        })\n          .then(res => res.json())\n          .then(\n            (result) => {\n              if(result.status === \"Success\"){\n                this.setState({questionType:result.questionType});\n              }else if(result.status === \"Fail\"){\n                  alert(\"Something went wrong\");\n              }\n            }\n    )\n}\n\nrender() {\n  return (\n    <div className=\"\">\n        <div className=\"challengeHeader\">\n            <div className=\"challengeHeaderMessage\">Break the ENGIMA</div>\n            <div className=\"challengeTimer\">HH:MM:SS:</div>\n        </div>\n        <div className=\"challengeBody\">\n            {this.state.questionType===\"P\"?\n            <Puzzle toggleQuestion={this.checkProgress}/>:\n            <Code toggleQuestion={this.checkProgress}/>}\n        </div>\n    </div>\n  );\n}\n}\nexport default Question;\n"]},"metadata":{},"sourceType":"module"}