{"version":3,"sources":["Register.js","App.js","serviceWorker.js","index.js"],"names":["Register","props","state","isTeamNameAvailable","teamName","checkTeamAvailable","bind","handleTeamChange","event","this","setState","target","value","fetch","headers","method","body","JSON","stringify","then","res","json","result","status","className","placeholder","type","onChange","onClick","React","Component","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ySAyFeA,G,kBArFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,qBAAqB,EACrBC,SAAS,IAEX,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBAPP,E,8EAUJE,GACbC,KAAKC,SAAS,CAACN,SAASI,EAAMG,OAAOC,U,2CAGpB,IAAD,OAEhBC,MAAM,gEAAgE,CACpEC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAC,SAAWT,KAAKP,MAAME,SAAS,OAAS,SAE7De,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACsB,SAAlBA,EAAOC,QACR,EAAKb,SAAS,CAACP,qBAAoB,S,+BAO7C,OACE,yBAAKqB,UAAU,UACX,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,WAAf,oBACA,yBAAKA,UAAU,SAAf,8FAGA,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,YAAf,mBACA,yBAAKA,UAAU,eAAc,2BAAOC,YAAY,kBAAkBC,KAAK,OAAOF,UAAU,gBAAgBG,SAAUlB,KAAKF,oBACvH,yBAAKiB,UAAU,aAAY,yBAAKA,UAAU,eAAeI,QAASnB,KAAKJ,oBAA5C,qBAEK,IAAnCI,KAAKP,MAAMC,oBACZ,yBAAKqB,UAAU,gBACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,uBAAf,eACA,yBAAKA,UAAU,WACX,yBAAKA,UAAU,kBAAf,QACA,2BAAOA,UAAU,YAAYE,KAAK,OAAOD,YAAY,gBAEzD,yBAAKD,UAAU,kBACX,yBAAKA,UAAU,yBAAf,gBACA,2BAAOA,UAAU,mBAAmBE,KAAK,OAAOD,YAAY,wBAEhE,yBAAKD,UAAU,cACX,yBAAKA,UAAU,qBAAf,YACA,2BAAOA,UAAU,eAAeE,KAAK,OAAOD,YAAY,qBAGhE,yBAAKD,UAAU,kBACX,yBAAKA,UAAU,uBAAf,eACA,yBAAKA,UAAU,WACX,yBAAKA,UAAU,kBAAf,QACA,2BAAOA,UAAU,YAAYE,KAAK,OAAOD,YAAY,gBAEzD,yBAAKD,UAAU,kBACX,yBAAKA,UAAU,yBAAf,gBACA,2BAAOA,UAAU,mBAAmBE,KAAK,OAAOD,YAAY,wBAEhE,yBAAKD,UAAU,cACX,yBAAKA,UAAU,qBAAf,YACA,2BAAOA,UAAU,eAAeE,KAAK,OAAOD,YAAY,qBAGhE,yBAAKD,UAAU,kBAAf,WACG,mC,GAjFQK,IAAMC,Y,eCadC,E,iLATb,OACM,kBAAC,IAAD,KACA,yBAAKP,UAAU,OACf,kBAAC,IAAD,CAAOQ,KAAO,IAAIC,UAAajC,U,GANrB6B,IAAMC,WCQJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.8a27df46.chunk.js","sourcesContent":["import React from 'react';\nimport './Register.css';\n\nclass Register extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isTeamNameAvailable: false,\n      teamName:''\n    };\n    this.checkTeamAvailable = this.checkTeamAvailable.bind(this);\n    this.handleTeamChange = this.handleTeamChange.bind(this);\n}\n\nhandleTeamChange(event){\n    this.setState({teamName:event.target.value});\n}\n\ncheckTeamAvailable(){\n    \n    fetch(\"http://localhost:8080/codingPlatform/checkTeam?key=SHARED_KEY\",{\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: \"POST\",\n      body: JSON.stringify({\"teamName\":this.state.teamName,\"status\":null})\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if(result.status === \"Fail\"){\n            this.setState({isTeamNameAvailable:true});\n          }\n        }\n      )\n  }\n\nrender() {\n  return (\n    <div className=\"header\">\n        <div className=\"headerBackground\">\n        <div className=\"heading\">Break the ENGIMA</div>\n        <div className=\"quote\">“Those who can imagine anything, can create the impossible.”\n            ― Alan Turing</div>\n        </div>\n        <div className=\"registerForm\">\n            <div className=\"teamName\">Enter Team Name</div>\n            <div className=\"teamNameDiv\"><input placeholder=\"Enter team name\" type=\"text\" className=\"teamNameInput\" onChange={this.handleTeamChange}/></div>\n            <div className=\"submitDiv\"><div className=\"submitButton\" onClick={this.checkTeamAvailable}>Check Validity</div></div>\n        </div>\n        {this.state.isTeamNameAvailable === true?\n        <div className=\"registerForm\">\n            <div className=\"candidateForm1\">\n                <div className=\"candidateFormHeader\">Candidate 1</div>\n                <div className=\"nameDiv\">\n                    <div className=\"nameInputTitle\">Name</div>\n                    <input className=\"nameInput\" type=\"text\" placeholder=\"Enter name\"/>\n                </div>\n                <div className=\"phoneNumberDiv\">\n                    <div className=\"phoneNumberInputTitle\">Phone Number</div>\n                    <input className=\"phoneNumberInput\" type=\"text\" placeholder=\"Enter phone number\"/>\n                </div>\n                <div className=\"emailIDDiv\">\n                    <div className=\"emailIDInputTitle\">Email ID</div>\n                    <input className=\"emailIDInput\" type=\"text\" placeholder=\"Enter Email ID\"/>\n                </div>\n            </div>\n            <div className=\"candidateForm1\">\n                <div className=\"candidateFormHeader\">Candidate 2</div>\n                <div className=\"nameDiv\">\n                    <div className=\"nameInputTitle\">Name</div>\n                    <input className=\"nameInput\" type=\"text\" placeholder=\"Enter name\"/>\n                </div>\n                <div className=\"phoneNumberDiv\">\n                    <div className=\"phoneNumberInputTitle\">Phone Number</div>\n                    <input className=\"phoneNumberInput\" type=\"text\" placeholder=\"Enter phone number\"/>\n                </div>\n                <div className=\"emailIDDiv\">\n                    <div className=\"emailIDInputTitle\">Email ID</div>\n                    <input className=\"emailIDInput\" type=\"text\" placeholder=\"Enter Email ID\"/>\n                </div>\n            </div>\n            <div className=\"registerButton\">Submit</div>\n        </div>:<div></div>}\n    </div>\n  );\n}\n}\nexport default Register;","import React from 'react';\nimport Register from './Register.js';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nclass App extends React.Component {\n\nrender() {\n  return (\n        <Router>\n        <div className=\"App\">\n        <Route path = \"/\" component = {Register} />\n        </div>\n        </Router>\n  );\n}\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}